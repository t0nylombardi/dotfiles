<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Razor.Utilities.Shared</name>
    </assembly>
    <members>
        <member name="M:Microsoft.AspNetCore.Razor.ArrayExtensions.AsSpan``1(``0[],System.Index)">
            <summary>
             Creates a new span over the portion of the target array defined by an <see cref="T:System.Index"/> value.
            </summary>
            <param name="array">
             The array to convert.
            </param>
            <param name="startIndex">
             The starting index.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Index"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="startIndex"/> is less than 0 or greater than <paramref name="array"/>.Length.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
             <paramref name="array"/> is covariant, and the array's type is not exactly <typeparamref name="T"/>[].
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ArrayExtensions.AsSpan``1(``0[],System.Range)">
            <summary>
             Creates a new span over the portion of the target array defined by a <see cref="T:System.Range"/> value.
            </summary>
            <param name="array">
             The array to convert.
            </param>
            <param name="range">
             The range of the array to convert.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Range"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
             <paramref name="array"/> is covariant, and the array's type is not exactly <typeparamref name="T"/>[].
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ArrayExtensions.AsMemory``1(``0[],System.Index)">
            <summary>
             Creates a new memory region over the portion of the target starting at the specified index
             to the end of the array.
            </summary>
            <param name="array">
             The array to convert.
            </param>
            <param name="startIndex">
             The first position of the array.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Index"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="startIndex"/> is less than 0 or greater than <paramref name="array"/>.Length.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
             <paramref name="array"/> is covariant, and the array's type is not exactly <typeparamref name="T"/>[].
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ArrayExtensions.AsMemory``1(``0[],System.Range)">
            <summary>
             Creates a new memory region over the portion of the target array beginning at
             inclusive start index of the range and ending at the exclusive end index of the range.
            </summary>
            <param name="array">
             The array to convert.
            </param>
            <param name="range">
             The range of the array to convert.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Range"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
             <paramref name="array"/> is covariant, and the array's type is not exactly <typeparamref name="T"/>[].
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable(System.String,System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable(Microsoft.AspNetCore.Razor.Assumed.UnreachableInterpolatedStringHandler,System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable``1(System.String,System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Assumed.Unreachable``1(Microsoft.AspNetCore.Razor.Assumed.UnreachableInterpolatedStringHandler,System.String,System.Int32)">
            <summary>
             Can be called at points that are assumed to be unreachable at runtime.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.FileUtilities.GenerateUniquePath(System.String,System.String)">
            <summary>
            Generate a file path adjacent to the input path that has the
            specified file extension, using numbers to differentiate for
            any collisions.
            </summary>
            <param name="path">The input file path.</param>
            <param name="extension">The input file extension with a prepended ".".</param>
            <returns>A non-existent file path with a name in the specified format and a corresponding extension.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1">
            <summary>
             Helper that avoids creating an <see cref="T:System.Collections.Generic.IComparer`1"/> until its needed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1.AreInSortedOrder(`0,`0)">
            <summary>
             Determines whether <paramref name="value"/> is greater than <paramref name="previousValue"/>
             using the provided <see cref="T:System.Collections.Generic.IComparer`1"/> or <see cref="T:System.Comparison`1"/>.
            </summary>
            <remarks>
             We assume that value and previousValue are in sorted order if value is > previousValue.
             We don't consider value == previousValue to be sorted because the actual sort might
             not be stable, depending on T.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1.ComputeKeys``1(System.ReadOnlySpan{``0},System.Func{``0,`0},System.Span{Microsoft.AspNetCore.Razor.Utilities.SortKey{`0}})">
            <summary>
             Walk through <paramref name="items"/> and convert each element to a key using <paramref name="keySelector"/>.
             While walking, each computed key is compared with the previous one using the provided <see cref="T:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1"/>
             to determine whether they are already ordered.
            </summary>
            <returns>
             <see langword="true"/> if the keys are in order; otherwise <see langword="false"/>.
            </returns>
            <remarks>
             When the keys are already ordered, there's no need to perform a sort.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1.ComputeKeys``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,`0},System.Span{Microsoft.AspNetCore.Razor.Utilities.SortKey{`0}})">
            <summary>
             Walk through <paramref name="items"/> and convert each element to a key using <paramref name="keySelector"/>.
             While walking, each computed key is compared with the previous one using the provided <see cref="T:Microsoft.AspNetCore.Razor.Utilities.SortHelper`1"/>
             to determine whether they are already ordered.
            </summary>
            <returns>
             <see langword="true"/> if the keys are in order; otherwise <see langword="false"/>.
            </returns>
            <remarks>
             When the keys are already ordered, there's no need to perform a sort.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_a_non_negative_and_non_zero_value">
            <summary>{0} ('{1}') must be a non-negative and non-zero value.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_a_non_negative_and_non_zero_value(System.Object,System.Object)">
            <summary>{0} ('{1}') must be a non-negative and non-zero value.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_a_non_negative_value">
            <summary>{0} ('{1}') must be a non-negative value.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_a_non_negative_value(System.Object,System.Object)">
            <summary>{0} ('{1}') must be a non-negative value.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_a_non_zero_value">
            <summary>{0} ('{1}') must be a non-zero value.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_a_non_zero_value(System.Object,System.Object)">
            <summary>{0} ('{1}') must be a non-zero value.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_equal_to_2">
            <summary>{0} ('{1}') must be equal to '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_equal_to_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must be equal to '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_greater_than_2">
            <summary>{0} ('{1}') must be greater than '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_greater_than_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must be greater than '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_greater_than_or_equal_to_2">
            <summary>{0} ('{1}') must be greater than or equal to '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_greater_than_or_equal_to_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must be greater than or equal to '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_less_than_2">
            <summary>{0} ('{1}') must be less than '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_less_than_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must be less than '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_be_less_than_or_equal_to_2">
            <summary>{0} ('{1}') must be less than or equal to '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_be_less_than_or_equal_to_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must be less than or equal to '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR._0_1_must_not_be_equal_to_2">
            <summary>{0} ('{1}') must not be equal to '{2}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Format0_1_must_not_be_equal_to_2(System.Object,System.Object,System.Object)">
            <summary>{0} ('{1}') must not be equal to '{2}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Cannot_advance_past_end_of_the_buffer_which_has_a_size_of_0">
            <summary>Cannot advance past the end of the buffer, which has a size of {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatCannot_advance_past_end_of_the_buffer_which_has_a_size_of_0(System.Object)">
            <summary>Cannot advance past the end of the buffer, which has a size of {0}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Cannot_allocate_a_buffer_of_size_0">
            <summary>Cannot allocate a buffer of size {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatCannot_allocate_a_buffer_of_size_0(System.Object)">
            <summary>Cannot allocate a buffer of size {0}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Destination_is_too_short">
            <summary>Destination is too short.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Expected_condition_to_be_false">
            <summary>Expected condition to be false.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Expected_0_to_be_non_null">
            <summary>Expected '{0}' to be non-null.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatExpected_0_to_be_non_null(System.Object)">
            <summary>Expected '{0}' to be non-null.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Expected_condition_to_be_true">
            <summary>Expected condition to be true.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.File_0_Line_1">
            <summary>File='{0}', Line={1}</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatFile_0_Line_1(System.Object,System.Object)">
            <summary>File='{0}', Line={1}</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Non_negative_number_required">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.The_value_cannot_be_an_empty_string">
            <summary>The value cannot be an empty string.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.The_value_cannot_be_an_empty_string_composed_entirely_of_whitespace">
            <summary>The value cannot be an empty string or composed entirely of whitespace.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.This_program_location_is_thought_to_be_unreachable">
            <summary>This program location is thought to be unreachable.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Unsupported_type_0">
            <summary>Unsupported type: '{0}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.FormatUnsupported_type_0(System.Object)">
            <summary>Unsupported type: '{0}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Contains_no_elements">
            <summary>Contains no elements</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Contains_more_than_one_element">
            <summary>Contains more than one element</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Contains_no_matching_elements">
            <summary>Contains no matching elements</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Utilities.Shared.Resources.SR.Contains_more_than_one_matching_element">
            <summary>Contains more than one matching element</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ListExtensions.SetCapacityIfLarger``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
             Set the <paramref name="list"/>'s capacity if it is less than <paramref name="newCapacity"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ListExtensions.ToArrayOrEmpty``1(System.Collections.Generic.List{``0})">
            <summary>
             Copies the elements of the <see cref="T:System.Collections.Generic.List`1"/> to a new array, or returns an
             empty array if the <see cref="T:System.Collections.Generic.List`1"/> is null.
            </summary>
            <remarks>
             On .NET Framework, <see cref="M:System.Collections.Generic.List`1.ToArray"/> will create a new empty array for any
             empty <see cref="T:System.Collections.Generic.List`1"/>. This method avoids that extra allocation.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ListExtensions.CopyTo``1(System.Collections.Generic.List{``0},System.Span{``0})">
            <summary>
             Copies the contents of the list to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to copy items from.</param>
            <param name="destination">The span to copy items into.</param>
            <exception cref="T:System.ArgumentNullException">
             The <paramref name="list"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
             The destination span is shorter than the source list.
            </exception>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.MemoryBuilder`1">
            <summary>
             Temporary builder that uses <see cref="T:System.Buffers.ArrayPool`1"/> to back a <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ArrayBuilderPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.DictionaryBuilderPool`2">
            <summary>
            A pool of <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Builder"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.DictionaryPool`2">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.Dictionary`2"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.HashSetPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares items using default equality.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ListPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.List`1"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilderExtensions.AsRef``1(Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder{``0}@)">
             <summary>
             Gets a mutable reference to a <see cref="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1"/> stored in a <c>using</c> variable.
             </summary>
             <remarks>
             <para>This supporting method allows <see cref="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1"/>, a non-copyable <see langword="struct"/>
             implementing <see cref="T:System.IDisposable"/>, to be used with <c>using</c> statements while still allowing them to
             be passed by reference in calls. The following two calls are equivalent:</para>
            
             <code>
             using var array = PooledArrayBuilder&lt;T&gt;.Empty;
            
             // Using the 'Unsafe.AsRef' method
             Method(ref Unsafe.AsRef(in builder));
            
             // Using this helper method
             Method(ref builder.AsRef());
             </code>
            
             <para>⚠ Do not move or rename this method without updating the corresponding
             Razor.Diagnostics.Analyzers\PooledArrayBuilderAsRefAnalyzer.cs.</para>
             </remarks>
             <typeparam name="T">The type of element stored in the pooled array builder.</typeparam>
             <param name="builder">A read-only reference to a pooled array builder which is part of a <c>using</c> statement.</param>
             <returns>A mutable reference to the pooled array builder.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1">
             <summary>
              Wraps a pooled <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> but doesn't allocate it until
              it's needed. Note: Dispose this to ensure that the pooled array builder is returned
              to the pool.
            
              There is significant effort to avoid retrieving the <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>.
              For very small arrays of length 4 or less, the elements will be stored on the stack. If the array
              grows larger than 4 elements, a builder will be employed. Afterward, the build will
              continue to be used, even if the arrays shrinks and has fewer than 4 elements.
             </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.InlineCapacity">
            <summary>
             The number of items that can be stored inline.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder">
            <summary>
             A builder to be used as storage after the first time that the number
             of items exceeds <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.InlineCapacity"/>. Once the builder is used,
             it is still used even if the number of items shrinks below <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.InlineCapacity"/>.
             Essentially, if this field is non-null, it will be used as storage.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._capacity">
            <summary>
             An optional initial capacity for the builder.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._inlineCount">
            <summary>
             The number of inline elements. Note that this value is only used when <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.TryGetBuilder(System.Collections.Immutable.ImmutableArray{`0}.Builder@)">
            <summary>
             Retrieves the inner <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/>.
            </summary>
            <returns>
             Returns <see langword="true"/> if <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/> is available; otherwise <see langword="false"/>
            </returns>
            <remarks>
             This should only be used by methods that will not add to the inner <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.TryGetBuilderAndEnsureCapacity(System.Collections.Immutable.ImmutableArray{`0}.Builder@)">
            <summary>
             Retrieves the inner <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/> and resets its capacity if necessary.
            </summary>
            <returns>
             Returns <see langword="true"/> if <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/> is available; otherwise <see langword="false"/>
            </returns>
            <remarks>
             This should only be used by methods that will add to the inner <see cref="F:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1._builder"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.DrainToImmutable">
            <summary>
             Returns the current contents as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> and sets
             the collection to a zero length array.
            </summary>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity"/> equals <see cref="P:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Count"/>, the
             internal array will be extracted as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying
             the contents. Otherwise, the contents will be copied into a new array. The collection
             will then be set to a zero-length array.
            </remarks>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Any">
            <summary>
             Determines whether this builder contains any elements.
            </summary>
            <returns>
             <see langword="true"/> if this builder contains any elements; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Any(System.Func{`0,System.Boolean})">
            <summary>
             Determines whether any element in this builder satisfies a condition.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if this builder is not empty and at least one of its elements passes
             the test in the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Any``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Determines whether any element in this builder satisfies a condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if this builder is not empty and at least one of its elements passes
             the test in the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.All(System.Func{`0,System.Boolean})">
            <summary>
             Determines whether all elements in this builder satisfy a condition.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if every element in this builder passes the test
             in the specified predicate, or if the builder is empty; otherwise,
             <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.All``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Determines whether all elements in this builder satisfy a condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if every element in this builder passes the test
             in the specified predicate, or if the builder is empty; otherwise,
             <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.First">
            <summary>
             Returns the first element in this builder.
            </summary>
            <returns>
             The first element in this builder.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The builder is empty.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.First(System.Func{`0,System.Boolean})">
            <summary>
             Returns the first element in this builder that satisfies a specified condition.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The first element in this builder that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.First``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the first element in this builder that satisfies a specified condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The first element in this builder that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault">
            <summary>
             Returns the first element in this builder, or a default value if the builder is empty.
            </summary>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty; otherwise,
             the first element in this builder.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault(`0)">
            <summary>
             Returns the first element in this builder, or a specified default value if the builder is empty.
            </summary>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty; otherwise,
             the first element in this builder.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
             Returns the first element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault(System.Func{`0,System.Boolean},`0)">
            <summary>
             Returns the first element in this builder that satisfies a condition, or a specified default value
             if no such element is found.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the first element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.FirstOrDefault``1(``0,System.Func{`0,``0,System.Boolean},`0)">
            <summary>
             Returns the first element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Last">
            <summary>
             Returns the last element in this builder.
            </summary>
            <returns>
             The value at the last position in this builder.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The builder is empty.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Last(System.Func{`0,System.Boolean})">
            <summary>
             Returns the last element in this builder that satisfies a specified condition.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The last element in this builder that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Last``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the last element in this builder that satisfies a specified condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The last element in this builder that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault">
            <summary>
             Returns the last element in this builder, or a default value if the builder is empty.
            </summary>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty; otherwise,
             the last element in this builder.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault(`0)">
            <summary>
             Returns the last element in this builder, or a specified default value if the builder is empty.
            </summary>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty; otherwise,
             the last element in this builder.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault(System.Func{`0,System.Boolean})">
            <summary>
             Returns the last element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault(System.Func{`0,System.Boolean},`0)">
            <summary>
             Returns the last element in this builder that satisfies a condition, or a specified default value
             if no such element is found.
            </summary>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the last element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.LastOrDefault``1(``0,System.Func{`0,``0,System.Boolean},`0)">
            <summary>
             Returns the last element in this builder that satisfies a condition, or a default value
             if no such element is found.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if this builder is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in this
             builder that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Single">
            <summary>
             Returns the only element in this builder, and throws an exception if there is not exactly one element.
            </summary>
            <returns>
             The single element in this builder.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The builder is empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             The builder contains more than one element.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Single(System.Func{`0,System.Boolean})">
            <summary>
             Returns the only element in this builder that satisfies a specified condition,
             and throws an exception if more than one such element exists.
            </summary>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element in this builder that satisfies a condition.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.Single``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the only element in this builder that satisfies a specified condition,
             and throws an exception if more than one such element exists.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element in this builder that satisfies a condition.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault">
            <summary>
             Returns the only element in this builder, or a default value if the builder is empty;
             this method throws an exception if there is more than one element in the builder.
            </summary>
            <returns>
             The single element in this builder, or <see langword="default"/>(<typeparamref name="T"/>)
             if this builder contains no elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The builder contains more than one element.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault(`0)">
            <summary>
             Returns the only element in this builder, or a specified default value if the builder is empty;
             this method throws an exception if there is more than one element in the builder.
            </summary>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             The single element in this builder, or <paramref name="defaultValue"/>
             if this builder contains no elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The builder contains more than one element.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault(System.Func{`0,System.Boolean})">
            <summary>
             Returns the only element in this builder that satisfies a specified condition or a default
             value if no such element exists; this method throws an exception if more than one element
             satisfies the condition.
            </summary>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element in this builder that satisfies the condition, or
             <see langword="default"/>(<typeparamref name="T"/>) if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in predicate.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault(System.Func{`0,System.Boolean},`0)">
            <summary>
             Returns the only element in this builder that satisfies a specified condition or a specified default
             value if no such element exists; this method throws an exception if more than one element
             satisfies the condition.
            </summary>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             The single element in this builder that satisfies the condition, or
             <paramref name="defaultValue"/> if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in predicate.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault``1(``0,System.Func{`0,``0,System.Boolean})">
            <summary>
             Returns the only element in this builder that satisfies a specified condition or a default
             value if no such element exists; this method throws an exception if more than one element
             satisfies the condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element in this builder that satisfies the condition, or
             <see langword="default"/>(<typeparamref name="T"/>) if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in predicate.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.SingleOrDefault``1(``0,System.Func{`0,``0,System.Boolean},`0)">
            <summary>
             Returns the only element in this builder that satisfies a specified condition or a specified default
             value if no such element exists; this method throws an exception if more than one element
             satisfies the condition.
            </summary>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if this builder is empty.
            </param>
            <returns>
             The single element in this builder that satisfies the condition, or
             <paramref name="defaultValue"/> if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in predicate.
            </exception>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.ThrowIndexOutOfRangeException">
            <summary>
             This is present to help the JIT inline methods that need to throw an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledArrayBuilder`1.ThrowInvalidOperation(System.String)">
            <summary>
             This is present to help the JIT inline methods that need to throw an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.PooledObjects.PooledArray`1.Array">
            <summary>
             Returns the array that was rented from <see cref="P:System.Buffers.ArrayPool`1.Shared"/>.
            </summary>
            <remarks>
             Returns a non-null array until <see cref="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledArray`1"/> is disposed.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.PooledObjects.PooledArray`1.Span">
            <summary>
             Returns a <see cref="T:System.Span`1"/> representing a portion of the rented array
             from its start to the minimum length.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
             The array has been returned to the pool.
            </exception>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledDictionaryBuilder`2">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Builder"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled array builder is returned
             to the pool.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.PooledObjects.PooledDictionaryBuilder`2.#ctor(Microsoft.Extensions.ObjectPool.ObjectPool{System.Collections.Immutable.ImmutableDictionary{`0,`1}.Builder})">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Builder"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled array builder is returned
             to the pool.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledHashSet`1">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Generic.HashSet`1"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled set is returned
             to the pool.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.PooledList`1">
            <summary>
             Wraps a pooled <see cref="T:System.Collections.Generic.List`1"/> but doesn't allocate it until
             it's needed. Note: Dispose this to ensure that the pooled list is returned
             to the pool.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.ReferenceEqualityHashSetPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares items using reference equality.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StackPool`1">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.Stack`1"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StopwatchPool">
            <summary>
            A pool of <see cref="T:System.Diagnostics.Stopwatch"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringBuilderPool">
            <summary>
            A pool of <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringDictionaryPool`1">
            <summary>
            Pooled <see cref="T:System.Collections.Generic.Dictionary`2"/> instances when the key is of type <see cref="T:System.String"/>.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.PooledObjects.StringHashSetPool">
            <summary>
            A pool of <see cref="T:System.Collections.Generic.HashSet`1"/> instances that compares strings.
            </summary>
            
            <remarks>
            Instances originating from this pool are intended to be short-lived and are suitable
            for temporary work. Do not return them as the results of methods or store them in fields.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1">
            <summary>
            Represents a value that can be retrieved asynchronously by many clients. The value will be
            computed on-demand the moment the first client asks for it. While being computed, more clients
            can request the value. As long as there are outstanding clients the underlying computation will
            proceed.  If all outstanding clients cancel their request then the underlying value computation
            will be cancelled as well.
            
            Creators of an <see cref="T:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1" /> can specify whether the result of the computation is
            cached for future requests or not. Choosing to not cache means the computation function is kept
            alive, whereas caching means the value (but not function) is kept alive once complete.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1._asynchronousComputeFunction">
            <summary>
            The underlying function that starts an asynchronous computation of the resulting value.
            Null'ed out once we've computed the result and we've been asked to cache it.  Otherwise,
            it is kept around in case the value needs to be computed again.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1._cachedResult">
            <summary>
            The Task that holds the cached result.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.SyncObject">
            <summary>
            Mutex used to protect reading and writing to all mutable objects and fields.  Traces indicate that there's
            negligible contention on this lock (and on any particular async-lazy in general), hence we can save some
            memory by using ourselves as the lock, even though this may inhibit cancellation.  Work done while holding
            the lock should be kept to a minimum.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1._requests">
            <summary>
            The hash set of all currently outstanding asynchronous requests. Null if there are no requests,
            and will never be empty.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1._asynchronousComputationCancellationSource">
            <summary>
            If an asynchronous request is active, the CancellationTokenSource that allows for
            cancelling the underlying computation.
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1._computationActive">
            <summary>
            Whether a computation is active or queued on any thread, whether synchronous or
            asynchronous.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.#ctor(`0)">
            <summary>
            Creates an AsyncLazy that always returns the value, analogous to <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.#ctor(System.Func{`1,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},`1)">
            <summary>
            Creates an AsyncLazy that supports both asynchronous computation and inline synchronous
            computation.
            </summary>
            <param name="asynchronousComputeFunction">A function called to start the asynchronous
            computation. This function should be cheap and non-blocking.</param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.TakeLock(System.Threading.CancellationToken)">
            <summary>
            Takes the lock for this object and if acquired validates the invariants of this class.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.Request">
            <remarks>
            This inherits from <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to avoid allocating two objects when we can just use one.
            The public surface area of <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> should probably be avoided in favor of the public
            methods on this class for correct behavior.
            </remarks>
        </member>
        <member name="F:Microsoft.AspNetCore.Razor.Threading.AsyncLazy`1.AsyncLazyImpl`1.Request._cancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> associated with this request. This field will be initialized before
            any cancellation is observed from the token.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Threading.TaskExtensions.VerifyCompleted(System.Threading.Tasks.Task)">
            <summary>
            Asserts the <see cref="T:System.Threading.Tasks.Task"/> passed has already been completed.
            </summary>
            <remarks>
            This is useful for a specific case: sometimes you might be calling an API that is "sometimes" async, and you're
            calling it from a synchronous method where you know it should have completed synchronously. This is an easy
            way to assert that while silencing any compiler complaints.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.Threading.TaskExtensions.VerifyCompleted``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Asserts the <see cref="T:System.Threading.Tasks.Task"/> passed has already been completed.
            </summary>
            <remarks>
            This is useful for a specific case: sometimes you might be calling an API that is "sometimes" async, and you're
            calling it from a synchronous method where you know it should have completed synchronously. This is an easy
            way to assert that while silencing any compiler complaints.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentException"/> with a parameter name and a message.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentException``1(System.String,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentException"/> with a parameter name and a message.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentNullException"/> with a parameter name.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentNullException``1(System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentNullException"/> with a parameter name.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name, message, and
             the actual invalid value.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="actualValue">
             The actual invalid value to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name and message.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException(System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.Object,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name, message, and
             the actual invalid value.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="actualValue">
             The actual invalid value to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name and message.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <param name="message">
             The message to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String)">
            <summary>
             Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name.
            </summary>
            <param name="paramName">
             The parameter name to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
             Throws an <see cref="T:System.InvalidOperationException"/> with a message.
            </summary>
            <param name="message">
             The message to include in the exception.
            </param>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.Razor.ThrowHelper.ThrowInvalidOperationException``1(System.String)">
            <summary>
             Throws an <see cref="T:System.InvalidOperationException"/> with a message.
            </summary>
            <param name="message">
             The message to include in the exception.
            </param>
            <returns>
             This method does not return because it always throws an exception, but it is defined to return a
             <typeparamref name="T"/> value. This is useful for control flow scenarios where it is necessary to
             throw an exception and return from a method.
            </returns>
            <remarks>
             This helps the JIT inline methods that need to throw an exceptions.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Razor.VoidResult">
            <summary>
            Explicitly indicates result is void
            </summary>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArray``1(System.Buffers.ArrayPool{``0},System.Int32)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <remarks>
             The array is guaranteed to be at least <paramref name="minimumLength"/> in length. However,
             it will likely be larger.
            </remarks>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArray``1(System.Buffers.ArrayPool{``0},System.Int32,System.Boolean)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <param name="clearOnReturn">
             Indicates whether the contents of the array should be cleared before it is returned to the pool.
            </param>
            <remarks>
             The array is guaranteed to be at least <paramref name="minimumLength"/> in length. However,
             it will likely be larger.
            </remarks>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArray``1(System.Buffers.ArrayPool{``0},System.Int32,``0[]@)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <param name="array">
             The rented array.
            </param>
            <remarks>
             The array is guaranteed to be at least <paramref name="minimumLength"/> in length. However,
             it will likely be larger.
            </remarks>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArray``1(System.Buffers.ArrayPool{``0},System.Int32,System.Boolean,``0[]@)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <param name="clearOnReturn">
             Indicates whether the contents of the array should be cleared before it is returned to the pool.
            </param>
            <param name="array">
             The rented array.
            </param>
            <remarks>
             The array is guaranteed to be at least <paramref name="minimumLength"/> in length. However,
             it will likely be larger.
            </remarks>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArraySpan``1(System.Buffers.ArrayPool{``0},System.Int32,System.Span{``0}@)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
             The rented array is provided as a <see cref="T:System.Span`1"/> representing a portion of the rented array
             from its start to the minimum length.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <param name="span">
             The <see cref="T:System.Span`1"/> representing a portion of the rented array from its start to the minimum length.
            </param>
        </member>
        <member name="M:System.Buffers.BufferExtensions.GetPooledArraySpan``1(System.Buffers.ArrayPool{``0},System.Int32,System.Boolean,System.Span{``0}@)">
            <summary>
             Rents an array of the given minimum length from the specified <see cref="T:System.Buffers.ArrayPool`1"/>.
             The rented array is provided as a <see cref="T:System.Span`1"/> representing a portion of the rented array
             from its start to the minimum length.
            </summary>
            <param name="pool">
             The <see cref="T:System.Buffers.ArrayPool`1"/> to use.
            </param>
            <param name="minimumLength">
             The minimum length of the array.
            </param>
            <param name="clearOnReturn">
             Indicates whether the contents of the array should be cleared before it is returned to the pool.
            </param>
            <param name="span">
             The <see cref="T:System.Span`1"/> representing a portion of the rented array from its start to the minimum length.
            </param>
        </member>
        <member name="T:System.Buffers.PooledArrayBufferWriter`1">
            <summary>
             <see cref="T:System.Buffers.IBufferWriter`1"/> that uses <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Span{``0})">
            <summary>
             Copies the contents of the sequence to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to copy items from.</param>
            <param name="destination">The span to copy items into.</param>
            <exception cref="T:System.ArgumentException">
             The destination span is shorter than the source sequence.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderAsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderAsArray``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderAsArray``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="sequence"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.HashSetExtensions.CopyTo``1(System.Collections.Generic.HashSet{``0},System.Span{``0})">
            <summary>
             Copies the contents of the set to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
            <param name="set">The set to copy items from.</param>
            <param name="destination">The span to copy items into.</param>
            <exception cref="T:System.ArgumentNullException">
             The <paramref name="set"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
             The destination span is shorter than the source set.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into out variables. Provides support
            for assignment like
            <code>
            var (k,v) = kvp;
            </code>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Any``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Determines whether a list contains any elements.
            </summary>
            <param name="list">
             The <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to check for emptiness.
            </param>
            <returns>
             <see langword="true"/> if the list contains any elements; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Any``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Determines whether any element of a list satisfies a condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whose elements to apply the predicate to.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if the list is not empty and at least one of its elements passes
             the test in the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Any``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Determines whether any element of a list satisfies a condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whose elements to apply the predicate to.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if the list is not empty and at least one of its elements passes
             the test in the specified predicate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.All``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Determines whether all elements of a list satisfy a condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whose elements to apply the predicate to.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if every element of the list passes the test
             in the specified predicate, or if the list is empty; otherwise,
             <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.All``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Determines whether all elements of a list satisfy a condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whose elements to apply the predicate to.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="true"/> if every element of the list passes the test
             in the specified predicate, or if the list is empty; otherwise,
             <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.First``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the first element of a list.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the first element of.
            </param>
            <returns>
             The first element in the specified list.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The list is empty.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.First``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the first element in a list that satisfies a specified condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The first element in the list that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.First``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the first element in a list that satisfies a specified condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The first element in the list that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.FirstOrDefault``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the first element of a list, or a default value if no element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the first element of.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty; otherwise,
             the first element in <paramref name="list"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.FirstOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
             Returns the first element of a list, or a specified default value if the list contains no elements.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the first element of.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty
            </param>
            <returns>
             <paramref name="defaultValue"/> if <paramref name="list"/> is empty; otherwise,
             the first element in <paramref name="list"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.FirstOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the first element of the list that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.FirstOrDefault``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the first element of the list that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Last``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the last element of a list.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the last element of.
            </param>
            <returns>
             The value at the last position in the list.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The list is empty.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Last``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the last element of a list that satisfies a specified condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The last element in the list that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Last``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the last element of a list that satisfies a specified condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             The last element in the list that passes the test in the specified predicate function.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the last element of a list, or a default value if the list contains no elements.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the last element of.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty; otherwise,
             the last element in <paramref name="list"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
             Returns the last element of a list, or a specified default value if the list contains no elements.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the last element of.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty
            </param>
            <returns>
             <paramref name="defaultValue"/> if <paramref name="list"/> is empty; otherwise,
             the last element in <paramref name="list"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the last element of a list that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the last element of a list that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <returns>
             <see langword="default"/>(<typeparamref name="T"/>) if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
             Returns the last element of a list that satisfies a condition, or a specified default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.LastOrDefault``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean},``0)">
            <summary>
             Returns the last element of a list that satisfies a condition, or a specified default value if no such element is found.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return an element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test each element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty.
            </param>
            <returns>
             <paramref name="defaultValue"/> if <paramref name="list"/> is empty or if no element
             passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="list"/>
             that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Single``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the only element of a list, and throws an exception if there is not exactly one element in the list.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the single element of.
            </param>
            <returns>
             The single element of the list.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The list is empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             The list contains more than one element.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Single``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the only element of a list that satisfies a specified condition,
             and throws an exception if more than one such element exists.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element of the list that satisfies a condition.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.Single``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the only element of a list that satisfies a specified condition,
             and throws an exception if more than one such element exists.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element of the list that satisfies a condition.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             No element satisfies the condition in <paramref name="predicate"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Returns the only element of a list, or a default value if the list is empty;
             this method throws an exception if there is more than one element in the list.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the single element of.
            </param>
            <returns>
             The single element in the list, or <see langword="default"/>(<typeparamref name="T"/>)
             if the list contains no elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The list contains more than one element.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
             Returns the only element of a list, or a specified default value if the list is empty;
             this method throws an exception if there is more than one element in the list.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return the single element of.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty
            </param>
            <returns>
             The single element in the list, or <paramref name="defaultValue"/>
             if the list contains no elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             The list contains more than one element.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
             Returns the only element of a list that satisfies a specified condition or a default value
             if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element of the list that satisfies the condition, or
             <see langword="default"/>(<typeparamref name="T"/>) if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
             Returns the only element of a list that satisfies a specified condition or a default value
             if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <returns>
             The single element of the list that satisfies the condition, or
             <see langword="default"/>(<typeparamref name="T"/>) if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
             Returns the only element of a list that satisfies a specified condition, or a specified default value
             if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty.
            </param>
            <returns>
             The single element of the list that satisfies the condition, or
             <paramref name="defaultValue"/> if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.SingleOrDefault``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Boolean},``0)">
            <summary>
             Returns the only element of a list that satisfies a specified condition, or a specified default value
             if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="list">
             An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to return a single element from.
            </param>
            <param name="arg">
             An argument to pass to <paramref name="predicate"/>.
            </param>
            <param name="predicate">
             A function to test an element for a condition.
            </param>
            <param name="defaultValue">
             The default value to return if the list is empty.
            </param>
            <returns>
             The single element of the list that satisfies the condition, or
             <paramref name="defaultValue"/> if no such element is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
             More than one element satisfies the condition in <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},System.Span{``0})">
            <summary>
             Copies the contents of the list to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to copy items from.</param>
            <param name="destination">The span to copy items into.</param>
            <exception cref="T:System.ArgumentException">
             The destination span is shorter than the source list.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderAsArray``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderAsArray``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderAsArray``1(System.Collections.Generic.IReadOnlyList{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderDescendingAsArray``1(System.Collections.Generic.IReadOnlyList{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.OrderByDescendingAsArray``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="list"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="list">An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="T:System.Collections.Immutable.ImmutableArrayExtensions">
            <summary>
            <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> extension methods
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.NullToEmpty``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Returns an empty array if the input array is null (default)
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.GetMostRecentUniqueItems``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> that contains no duplicates from the <paramref name="source"/> array
            and returns the most recent copy of each item.
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.BinarySearchBy``2(System.Collections.Immutable.ImmutableArray{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Executes a binary search over an array, but allows the caller to decide what constitutes a match
            </summary>
            <typeparam name="T">Type of the elements in the array</typeparam>
            <typeparam name="TArg">Type of the argument to pass to the comparer</typeparam>
            <param name="array">The array to search</param>
            <param name="arg">An argument to pass to the comparison function</param>
            <param name="comparer">A comparison function that evaluates an item in the array. Return 0 if the item is a match,
            or -1 if the item indicates a successful match will be found in the left branch, or 1 if the item indicates a successful
            match will be found in the right branch.</param>
            <returns>The index of the element found</returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderAsArray``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderAsArray``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderAsArray``1(System.Collections.Immutable.ImmutableArray{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderDescendingAsArray``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderDescendingAsArray``1(System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderDescendingAsArray``1(System.Collections.Immutable.ImmutableArray{``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByDescendingAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByDescendingAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.OrderByDescendingAsArray``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Sorts the elements of an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="array"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="array">An array to ordered.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Collections.Generic.IComparer{``0})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Comparison{``0})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Collections.Generic.IComparer{``0})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Comparison{``0})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in ascending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in ascending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.ToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Returns an immutable array that contains the current contents of this
             <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> sorted in descending order according to a key.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             Returns a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> whose elements are sorted in descending order according to a key.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Collections.Generic.IComparer{``0})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrdered``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Comparison{``0})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Collections.Generic.IComparer{``0})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedDescending``1(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Comparison{``0})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order and sets the collection to a zero length array.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="builder"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedBy``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in ascending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in ascending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.DrainToImmutableOrderedByDescending``2(System.Collections.Immutable.ImmutableArray{``0}.Builder,System.Func{``0,``1},System.Comparison{``1})">
            <summary>
             Returns the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             as an immutable array sorted in descending order according to a key and sets
             the collection to a zero length array.
            </summary>
            <typeparam name="TElement">The type of the elements in <paramref name="builder"/>.</typeparam>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="builder">The <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/> whose contents will be sorted.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare keys.</param>
            <returns>
             An immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"/>
             sorted in descending order according to a key.
            </returns>
            <remarks>
             If <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">Capacity</see> equals
             <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">Count</see>, the internal array will be extracted as an
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> without copying the contents. Otherwise, the contents will be copied
             into a new array. The collection will then be set to a zero length array.
            </remarks>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.Unsafe``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
             Provides a set of unsafe operations that can be performed on an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">The array that unsafe operations will target.</param>
            <returns>
             Returns a struct that provides access to unsafe operations to perform on the
             <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>. These operations mutate the internal array
             of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> and should be only be used in
             performance-critical code.
            </returns>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.Order">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.Order(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.Order(System.Comparison{`0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order.
            </summary>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderDescending">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderDescending(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderDescending(System.Comparison{`0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order.
            </summary>
            <param name="comparison">A <see cref="T:System.Comparison`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderBy``1(System.Func{`0,``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderBy``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderByDescending``1(System.Func{`0,``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare elements.</param>
        </member>
        <member name="M:System.Collections.Immutable.ImmutableArrayExtensions.UnsafeOperations`1.OrderByDescending``1(System.Func{`0,``0},System.Comparison{``0})">
            <summary>
             Sorts the elements of this <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparison">An <see cref="T:System.Comparison`1"/> to compare elements.</param>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
             Indicates whether the specified string is <see langword="null"/> or an empty string ("").
            </summary>
            <param name="value">
             The string to test.
            </param>
            <returns>
             <see langword="true"/> if the <paramref name="value"/> parameter is <see langword="null"/>
             or an empty string (""); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
             This extension method is useful on .NET Framework and .NET Standard 2.0 where
             <see cref="M:System.String.IsNullOrEmpty(System.String)"/> is not annotated for nullability.
            </remarks>
        </member>
        <member name="M:System.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
             Indicates whether a specified string is <see langword="null"/>, empty, or consists only
             of white-space characters.
            </summary>
            <param name="value">
             The string to test.
            </param>
            <returns>
             <see langword="true"/> if the <paramref name="value"/> parameter is <see langword="null"/>
             or <see cref="F:System.String.Empty"/>, or if <paramref name="value"/> consists exclusively of
             white-space characters.
            </returns>
            <remarks>
             This extension method is useful on .NET Framework and .NET Standard 2.0 where
             <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/> is not annotated for nullability.
            </remarks>
        </member>
        <member name="M:System.StringExtensions.AsSpan(System.String,System.Index)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of the target string from
             a specified position to the end of the string.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="startIndex">
             The index at which to begin this slice.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Index"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="startIndex"/> is less than 0 or greater than <paramref name="text"/>.Length.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsSpan(System.String,System.Range)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of a target string using
             the range start and end indexes.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="range">
             The range that has start and end indexes to use for slicing the string.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Range"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsSpanOrDefault(System.String)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a string. If the target string
             is <see langword="null"/> a <see langword="default"/>(<see cref="T:System.ReadOnlySpan`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
        </member>
        <member name="M:System.StringExtensions.AsSpanOrDefault(System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of the target string from
             a specified position to the end of the string. If the target string is <see langword="null"/>
             a <see langword="default"/>(<see cref="T:System.ReadOnlySpan`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="start">
             The index at which to begin this slice.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="start"/> is less than 0 or greater than <paramref name="text"/>.Length.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsSpanOrDefault(System.String,System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of the target string from
             a specified position for a specified number of characters. If the target string is
             <see langword="null"/> a <see langword="default"/>(<see cref="T:System.ReadOnlySpan`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="start">
             The index at which to begin this slice.
            </param>
            <param name="length">
             The desired length for the slice.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="start"/>, <paramref name="length"/>, or <paramref name="start"/> + <paramref name="length"/>
             is not in the range of <paramref name="text"/>.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsSpanOrDefault(System.String,System.Index)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of the target string from
             a specified position to the end of the string. If the target string is <see langword="null"/>
             a <see langword="default"/>(<see cref="T:System.ReadOnlySpan`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="startIndex">
             The index at which to begin this slice.
            </param>
        </member>
        <member name="M:System.StringExtensions.AsSpanOrDefault(System.String,System.Range)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlySpan`1"/> over a portion of the target string using the range
             start and end indexes. If the target string is <see langword="null"/> a
             <see langword="default"/>(<see cref="T:System.ReadOnlySpan`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="range">
             The range that has start and end indexes to use for slicing the string.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsMemory(System.String,System.Index)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of a target string starting at a specified index.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="startIndex">
             The index at which to begin this slice.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Index"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="startIndex"/> is less than 0 or greater than <paramref name="text"/>.Length.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsMemory(System.String,System.Range)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of a target string using
             the range start and end indexes.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="range">
             The range that has start and end indexes to use for slicing the string.
            </param>
            <remarks>
             This uses Razor's <see cref="T:System.Range"/> type, which is type-forwarded on .NET.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsMemoryOrDefault(System.String)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a string. If the target string
             is <see langword="null"/> a <see langword="default"/>(<see cref="T:System.ReadOnlyMemory`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
        </member>
        <member name="M:System.StringExtensions.AsMemoryOrDefault(System.String,System.Int32)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of the target string from
             a specified position to the end of the string. If the target string is <see langword="null"/>
             a <see langword="default"/>(<see cref="T:System.ReadOnlyMemory`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="start">
             The index at which to begin this slice.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="start"/> is less than 0 or greater than <paramref name="text"/>.Length.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsMemoryOrDefault(System.String,System.Int32,System.Int32)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of the target string from
             a specified position for a specified number of characters. If the target string is
             <see langword="null"/> a <see langword="default"/>(<see cref="T:System.ReadOnlyMemory`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="start">
             The index at which to begin this slice.
            </param>
            <param name="length">
             The desired length for the slice.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="start"/>, <paramref name="length"/>, or <paramref name="start"/> + <paramref name="length"/>
             is not in the range of <paramref name="text"/>.
            </exception>
        </member>
        <member name="M:System.StringExtensions.AsMemoryOrDefault(System.String,System.Index)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of the target string from
             a specified position to the end of the string. If the target string is <see langword="null"/>
             a <see langword="default"/>(<see cref="T:System.ReadOnlyMemory`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="startIndex">
             The index at which to begin this slice.
            </param>
        </member>
        <member name="M:System.StringExtensions.AsMemoryOrDefault(System.String,System.Range)">
            <summary>
             Creates a new <see cref="T:System.ReadOnlyMemory`1"/> over a portion of the target string using the range
             start and end indexes. If the target string is <see langword="null"/> a
             <see langword="default"/>(<see cref="T:System.ReadOnlyMemory`1"/>) is returned.
            </summary>
            <param name="text">
             The target string.
            </param>
            <param name="range">
             The range that has start and end indexes to use for slicing the string.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start or end index is not within the bounds of the string.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="range"/>'s start index is greater than its end index.
            </exception>
        </member>
        <member name="M:System.StringExtensions.Contains(System.String,System.Char)">
            <summary>
             Returns a value indicating whether a specified character occurs within a string instance.
            </summary>
            <param name="text">
             The string instance.
            </param>
            <param name="value">
             The character to seek.
            </param>
            <returns>
             <see langword="true"/> if the value parameter occurs within the string; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
             This method exists on .NET Core, but doesn't on .NET Framework or .NET Standard 2.0.
            </remarks>
        </member>
        <member name="M:System.StringExtensions.Contains(System.String,System.Char,System.StringComparison)">
            <summary>
             Returns a value indicating whether a specified character occurs within a string instance,
             using the specified comparison rules.
            </summary>
            <param name="text">
             The string instance.
            </param>
            <param name="value">
             The character to seek.
            </param>
            <param name="comparisonType">
             One of the enumeration values that specifies the rules to use in the comparison.
            </param>
            <returns>
             <see langword="true"/> if the value parameter occurs within the string; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
             This method exists on .NET Core, but doesn't on .NET Framework or .NET Standard 2.0.
            </remarks>
        </member>
        <member name="M:System.StringExtensions.IndexOf(System.String,System.Char,System.StringComparison)">
            <summary>
             Reports the zero-based index of the first occurrence of the specified Unicode character in a string instance.
             A parameter specifies the type of search to use for the specified character.
            </summary>
            <param name="text">
             The string instance.
            </param>
            <param name="value">
             The character to compare to the character at the start of this string.
            </param>
            <param name="comparisonType">
             An enumeration value that specifies the rules for the search.
            </param>
            <returns>
             The zero-based index of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>
            <remarks>
             <para>
              Index numbering starts from zero.
             </para>
             <para>
              The <paramref name="comparisonType"/> parameter is a <see cref="T:System.StringComparison"/> enumeration member
              that specifies whether the search for the <paramref name="value"/> argument uses the current or invariant culture,
              is case-sensitive or case-insensitive, or uses word or ordinal comparison rules.
             </para>
             <para>
              This method exists on .NET Core, but doesn't on .NET Framework or .NET Standard 2.0.
             </para>
            </remarks>
        </member>
        <member name="M:System.StringExtensions.StartsWith(System.String,System.Char)">
            <summary>
             Determines whether a string instance starts with the specified character.
            </summary>
            <param name="text">
             The string instance.
            </param>
            <param name="value">
             The character to compare to the character at the start of this string.
            </param>
            <returns>
             <see langword="true"/> if <paramref name="value"/> matches the start of the string;
             otherwise, <see langword="false"/>.
            </returns>
            <remarks>
             <para>
              This method performs an ordinal (case-sensitive and culture-insensitive) comparison.
             </para>
             <para>
              This method exists on .NET Core, but doesn't on .NET Framework or .NET Standard 2.0.
             </para>
            </remarks>
        </member>
        <member name="M:System.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
             Determines whether the end of a string instance matches the specified character.
            </summary>
            <param name="text">
             The string instance.
            </param>
            <param name="value">
             The character to compare to the character at the end of this string.
            </param>
            <returns>
             <see langword="true"/> if <paramref name="value"/> matches the end of this string;
             otherwise, <see langword="false"/>.
            </returns>
            <remarks>
             <para>
              This method performs an ordinal (case-sensitive and culture-insensitive) comparison.
             </para>
             <para>
              This method exists on .NET Core, but doesn't on .NET Framework or .NET Standard 2.0.
             </para>
            </remarks>
        </member>
        <member name="T:System.StringExtensions.SpanAction`2">
            <summary>
             Encapsulates a method that receives a span of objects of type <typeparamref name="T"/>
             and a state object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">
             The type of the objects in the span.
            </typeparam>
            <typeparam name="TArg">
             The type of the object that represents the state.
            </typeparam>
            <param name="span">
             A span of objects of type <typeparamref name="T"/>.
            </param>
            <param name="arg">
             A state object of type <typeparamref name="TArg"/>.
            </param>
        </member>
        <member name="M:System.StringExtensions.CreateString``1(System.Int32,``0,System.StringExtensions.SpanAction{System.Char,``0})">
            <summary>
             Creates a new string with a specific length and initializes it after creation by using the specified callback.
            </summary>
            <typeparam name="TState">
             The type of the element to pass to <paramref name="action"/>.
            </typeparam>
            <param name="length">
             The length of the string to create.
            </param>
            <param name="state">
             The element to pass to <paramref name="action"/>.
            </param>
            <param name="action">
             A callback to initialize the string
            </param>
            <returns>
             The created string.
            </returns>
            <remarks>
             The initial content of the destination span passed to <paramref name="action"/> is undefined.
             Therefore, it is the delegate's responsibility to ensure that every element of the span is assigned.
             Otherwise, the resulting string could contain random characters
            </remarks>
        </member>
    </members>
</doc>
